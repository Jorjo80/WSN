C51 COMPILER V8.08   TEMPLATE_DEMO                                                         11/05/2018 16:33:10 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE TEMPLATE_DEMO
OBJECT MODULE PLACED IN Template_demo.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Template_demo.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          
   2          #include <ADuC841.h>
   3          #include <stdio.h>
   4          
   5          /**************** FPGA Communication Port: ********************/
   6          sbit TrigByte1N  = P0^7;                   
   7          sbit Ack1N       = P0^6;          
   8          sbit TrigByte2N  = P0^5;
   9          sbit Ack2N       = P0^4;
  10          sbit SelTrigger  = P0^3;
  11          sbit reset_fpga  = P0^0;
  12          /**************************************************************/
  13          
  14          unsigned char DATA_L;
  15          unsigned char DATA_H;
  16          unsigned int datain;
  17          
  18          unsigned char flagWait, RXFlag;
  19          unsigned char charWait;
  20          
  21          unsigned char RX_Buffer[20];
  22          
  23          /***************** Timer Configuration: **************************/
  24          void _WS_Timer_Config(char value)
  25          {
  26   1              IEIP2   = 0xA4; // TIC Interruption enable
  27   1              SEC     = 0x00;
  28   1              HTHSEC  = 0x00;
  29   1              MIN             = 0x00;
  30   1              HOUR    = 0x00;
  31   1              INTVAL  = value;        //**(Config.)   
  32   1              TIMECON = 0x53;         // The timer interrupt each second **(Config.)  
  33   1      }       
  34          /*****************************************************************/
  35          
  36          /***************** ADC Configuration: ****************************/
  37          void _WS_ADC_Config (void)
  38          {
  39   1              ADCCON1  = 0xAC;     // ADCCON1: ADC Configuration: 12 clock periods for each conversion.              
             -                                                       
  40   1              ADCCON2  = 0x03;     // Selects channel 3 & on demand conversion.  (LDR is connected to the ADC3)
  41   1      }
  42          /*****************************************************************/
  43          
  44          /***************** UART configuration: ***************************/
  45          void _WSN_UART841_config()
  46          {
  47   1              SCON = 0x52;//SCON: UART Serial Port Control Register   => Mode 1: 8-bit UART, variable baud rate
  48   1              PCON = 0x80;//PCON: power-saving options and general-purpose status flags => SMOD=1 (Double UART Baud Rat
             -e)
  49   1              
  50   1              TMOD = 0x21;//Timer 1 Set M1 for 8-bit autoreload timer, Timer 0 Set M0 16-bit 
  51   1              TH1  = 0xDC;// 19200 ADuC841        //TH1 holds a value which is to be reloaded into TL1 each time it ove
             -rflows. (BaudRate = 19200 bps)
  52   1              TR1  = 1;   //Start timer 1
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         11/05/2018 16:33:10 PAGE 2   

  53   1      
  54   1              TI  = 1;   //bit1(SCON): Serial Port Transmit Interrupt Flag.
  55   1              ES  = 1;        // Serial Port interruption enable
  56   1              ET1 = 0;        // Timer 1 Interruption Disable 
  57   1      
  58   1              EA  = 1;        // Global Enable Interruption Flag
  59   1      
  60   1              RXFlag = 0;
  61   1      }
  62          /****************************************************************/
  63          
  64          /****************** ADC Conversion: *****************************/
  65          int _WSN_ADC_conversion()
  66          {
  67   1              unsigned int sensorData;
  68   1      
  69   1              //*** Sigle conversion:
  70   1              SCONV = 1;
  71   1              while (SCONV == 1);
  72   1      
  73   1              sensorData = ((ADCDATAH & 0x0F) * 0x0100) + ADCDATAL;
  74   1              
  75   1              SCONV = 0; // Conversion Flag
  76   1              
  77   1              return (sensorData);
  78   1      
  79   1      }
  80          /*****************************************************************/
  81          
  82          /****************** FPGA Initial config. *************************/
  83          void _WSN_ini_FPGA(void)
  84          { 
  85   1                 TrigByte1N  = 1;                
  86   1                 TrigByte2N  = 1;
  87   1                 SelTrigger  = 0;
  88   1                 reset_fpga  = 1;
  89   1      }
  90          /****************** FPGA-DATA capture: **************************/
  91          int _WSN_FPGA()
  92          {     
  93   1         unsigned int fpga_data;
  94   1               
  95   1         TrigByte1N = 0;
  96   1         while (Ack1N == 1){};
  97   1         
  98   1         DATA_L = P2;            // LSB
  99   1         TrigByte1N = 1;         // Release Trigger1
 100   1          
 101   1         TrigByte2N = 0;         //Trigger second data byte
 102   1         while (Ack2N == 1){};
 103   1         
 104   1         DATA_H = P2;           // MSB
 105   1         TrigByte2N = 1;    // Release Trigger2
 106   1      
 107   1         fpga_data = DATA_L + 256*(int)DATA_H;
 108   1      
 109   1         return(fpga_data);  
 110   1         
 111   1      }
 112          /*****************************************************************/
 113          
 114          /**************** Serial Transmission: ***************************/
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         11/05/2018 16:33:10 PAGE 3   

 115          void _WSN_Write_UART(char *message)
 116          {  
 117   1        do{
 118   2              TI = 0;
 119   2              SBUF = *message++;
 120   2              while (!TI);
 121   2        }while(*message != '\0'); // wait untin null character is read from the TX message
 122   1          TI = 0;
 123   1      }
 124          
 125          /**************** Serial Reception: ******************************/
 126          void _WSN_Read_UART(char *message)
 127          {  
 128   1        do{
 129   2              RI = 0;
 130   2              while (!RI);
 131   2              *message++ = SBUF;      
 132   2        }while(SBUF != '\r');  // wait untin null character is read from the RX message
 133   1        *message = '\0'; // Ending writing a null character into the buffer
 134   1      }
 135          
 136          /***************** Serial Interruption: **************************/
 137          void _CEI_Serial_interrupt(void) interrupt 4 using 0
 138          {
 139   1              ES = 0; // Disable Serial Interruption
 140   1      
 141   1              // Data Transmision:--------------------
 142   1              //if (TI == 1)   TI = 0;
 143   1      
 144   1              //Data Reception: ----------------------
 145   1              if (RI == 1) {
 146   2                 if(/*!flagWait && */SBUF == 't'){    /** If we are not waiting for a particular character, this condition
             - can be removed, so that
 147   3                                                          every received byte will be stored in RX_Buffer     **/
 148   3                        _WSN_Read_UART(RX_Buffer);
 149   3                        // retransmiting the message just for testing:
 150   3                        //_WSN_Write_UART(RX_Buffer);
 151   3                        RXFlag = 1;
 152   3                 }
 153   2                 else if(flagWait == 1 && SBUF == charWait){ /** Condition for waiting an answer prompt, such as 'O' fo
             -r "OK", etc. **/
 154   3                        flagWait = 0;
 155   3                 }
 156   2               RI=0;
 157   2               
 158   2              }//-------------------------------------
 159   1      
 160   1              ES = 1; // Esable Serial Interruption
 161   1      }
 162          /*****************************************************************/
 163          
 164          /***************** Timer Interruption: ***************************/
 165          void _WSN_interrupt_TimeInterval() interrupt 10 using 3 
 166          { 
 167   1         //unsigned int result,Temp,Hum,LDR,Axis;
 168   1            
 169   1      }
 170          /*****************************************************************/
 171          
 172          /****************** ZigBee read: *********************************/
 173          /** ASCII  = Value of the character to wait.
 174          /** getsmj = It allows to get caracters from the serial port and 
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         11/05/2018 16:33:10 PAGE 4   

 175          /** print them until ASCII arrives. 
 176          **/
 177          
 178          void _WSN_wait_answer(char ASCII,char getmsj)
 179          {  
 180   1              charWait = ASCII;       
 181   1              flagWait = 1;    
 182   1              while(flagWait); 
 183   1      }
*** WARNING C280 IN LINE 178 OF TEMPLATE_DEMO.C: 'getmsj': unreferenced local variable
 184          /**************** ZigBee Configuration: ************************/
 185          void _WSN_ZigBee_config(char type)
 186          { 
 187   1         _WSN_Write_UART ("AT&F\r");
 188   1        _WSN_wait_answer('K',0);
 189   1        _WSN_Write_UART ("ATS12=0590\r");
 190   1        _WSN_wait_answer('K',0);
 191   1      
 192   1        // . . . 
 193   1        // . . . 
 194   1        // . . . 
 195   1      
 196   1      }
*** WARNING C280 IN LINE 185 OF TEMPLATE_DEMO.C: 'type': unreferenced local variable
 197          /******************* Message Detection: *************************
 198          void _WSN_message_detect()
 199          {  
 200                  _WSN_wait_answer('U',0);
 201                  _WSN_wait_answer(':',0);
 202                  _WSN_wait_answer(',',1);
 203                   putchar('\t');
 204                  _WSN_wait_answer('=',0);
 205                  _WSN_wait_answer(0x03,1); 
 206          }
 207          /******************* Main Function: *****************************/
 208          void main()
 209          {
 210   1         //---- Peripheral Configurations: -------------
 211   1         _WSN_UART841_config(); 
 212   1         // --------------------------------------------
 213   1      
 214   1                 //printf ("Connected\n\r");
 215   1                 _WSN_Write_UART("Connected\n\r\0");                             
 216   1      
 217   1                 while (1)
 218   1                 {                            
 219   2                                 /************ Temp: ******************/
 220   2                                 // the temperature value taken from the FPGA has     to be
 221   2                                 // substracted from 27315 in order to show Degree Celsius x 1000                             
 222   2                                 // Ej: Temp =  ( result - (273.15*100) );      // Degree Celsius x 1000
 223   2                                 /*************************************/
 224   2                              
 225   2                                 /************ Humidity ***************/
 226   2                                 // the humidity value taken form the FPGA has to be multipled
 227   2                                 // by 127.5 and divided by 100 in order to show H% x 1000.
 228   2                                 // Ej: Hum =  ( (result*127.0)/100 );
 229   2                                 /*************************************/
 230   2                                 
 231   2                                 /************ Light: ******************/
 232   2      
 233   2                                 /**************************************/     
 234   2                                 
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         11/05/2018 16:33:10 PAGE 5   

 235   2                                 /** Serial Interrupt: **/
 236   2                                 if(RXFlag == 1){
 237   3                                               
 238   3                                                // Process RX_Buffer
 239   3                                                // . . . 
 240   3                                                // . . . 
 241   3                                                // . . . 
 242   3                                              RXFlag = 0;
 243   3                                 }                      
 244   2                 }
 245   1      
 246   1      }
 247          /****************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    331    ----
   CONSTANT SIZE    =     31    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     27       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
